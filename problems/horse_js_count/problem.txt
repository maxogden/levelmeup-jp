リッチで有益なデータセットが提供されるので、それに対するシンプルな
問い合わせインターフェイスを提供してください。

このエクササイズでは、@horse_js の 2,000 以上のツイートを格納した
LevelDB ストアが与えられます。あなたの仕事は、このデータセットに問い
合わせ、与えられた日付からデータセットの{italic}最後{/italic}までの
ツイートの数を返すことです。

それぞれのエントリーは一つのツイートです。キーはそのツイートが送られ
た正確な時刻で、標準の ISO 日付フォーマットです。（すなわち `Date`
オブジェクトの `toISOString()` メソッドによって生成されるフォーマット）。
エントリーの値は単にツイートの内容を表す String です。

単一の関数を export する{bold}モジュール{/bold}（プログラムではなく）
を書いてください。その関数が取る 3 つの引数は: 既存の LevelUP データ
ベースのインスタンス、YYYY-MM-DD 形式の日付文字列、そしてコールバック
関数です。

コールバックに返される最初の引数は、エラーが発生した場合はそのエラー、
なければ null であるべきです。エラーがなかった場合、第二の引数は与え
られた日付以降のツイートの数を表す整数です。

問い合わせが正確な範囲に対するものであることを確認するため、あなたの
解答は公式の解答に対してチェックされます。出力は「ストリームされた
エントリー」の数を含みます。

---------------------------------------------------------------------
ヒント:

この雛形を使ってモジュールファイルを始めてください:

  module.exports = function (db, date, callback) {
    // .. your code here
  }

ISO 日付フォーマットは常に辞書学的にソートされます。つまり、特別なこと
をしなくてもデータストア中のツイートは日付/時間の順で出てきます。

このエクササイズでは例の `createReadStream()` メソッドを使う必要がある
でしょうが、さらにエントリーの範囲を必要なデータだけに制限する必要がある
でしょう。つまり、「範囲問い合わせ」を実行しなければなりません。

デフォルトでは範囲はストア全体ですが、start と/または end キーで狭める
ことができます。このエクササイズでは特定の日付から開始して、ストアの
最後まで続くようにすると良いでしょう。

範囲問い合わせの力の一部は、start と end のキーが存在する必要がないと
いう事実から来ています。start キーがなければ、データはソート順で次に
来るキーのエントリーから始まります。

`createReadStream()` を呼ぶ時、start プロパティのあるオプション
オブジェクトを渡してください。このプロパティの値は例の日付文字列そのまま
で構いません。YYYY-MM-DD は ISO フォーマットの始まりで、ReadStream
をそのプレフィックスで始まる最初のキーまでジャンプさせるからです。
つまり、その日の最初のツイートです。

  db.createReadStream({ start: '...' })...

解答の残りには、受け取った 'data' イベント毎にカウンターをインクリメント
することと、総数をコールバックの第二引数として返すことが含まれるでしょう。

`{bold}level{/bold}` を利用してLevelDBのデータストアをオープンするプログラムを書きましょう。

プログラムに渡されるデータストアの絶対パスはコマンドライン引数のひとつめに設定されます。

二つ目のコマンドライン引数はデータストア内にロードするデータファイルへの絶対パスとなります。
そのファイルの各 {bold}行{/bold} はコンマで区切られた二つ、もしくは三つの文字列を含みます。
最初の文字列は {italic}"put"{/italic} もしくは {italic}"del"{/italic} です。
二つ目の文字列は {italic}キー{/italic} となり、"put" の場合には、三つ目の文字列は {italic}値{/italic} となります。

例：

  put,@izs,Isaac Z. Schlueter
  put,@tmpvar,Elijah Insua
  put,@mrbruning,Max Bruning
  del,@darachennis

この場合、Twitterのハンドルネームを実名にマッピングする3つのエントリーを追加します。

今回は `batch()` メソッドを使ってみましょう。 {italic}batch{/italic} オペレーションは
アトミックで、複数のライト (putとdelete）を実行するのに効率的な仕組みです。

----------------------------------------------------------------------
ヒント:

`batch()` メソッドには二つのフォームがあります。

 * {italic}配列フォーム{/italic} はオプションのコールバックを含む、配列形式での
   オペレーションを提供します。配列の必須項目は以下の項目です。
   
     { type: 'put', key: 'foo', value: 'bar' }
     もしくは:
     { type: 'del', key: 'foo' }

 * {italic}チェインフォーム{/italic} はLevelDBのバッチオペレーションに近いものと
   なっています。 `batch()` を引数無しで呼ぶと、 `Batch` オブジェクトが返ります。
   そのオブジェクトを使って write のコマンド群(putやdelete)をチェインできます。
   次のようなメソッドを含んでいます。

     - batch.put('key', 'value')
     - batch.del('key')
     - batch.write(callback)

   バッチのチェインフォームは LevelUP インスタンスが {italic}"ready"{/italic} 状態になるまで
   使うことができません。その状態を検出するには `level()` 関数へのコールバックの
   追加、もしくは LelvelUpオブジェクトに"ready"イベントリスナーを追加してください。
   詳しくはLevelUPのドキュメントを参照してください。

バッチによるライトはアトミックなので、全てのライトが成功するか、もしくは
失敗するかのどちらかになります。コールバックにエラーを受け取った場合、
バッチ処理全体が失敗したものと判断できます。

ファイルの各行は

  var arr = line.split(',')

によってわけられます。

`levelmeup run program.js` を走らせた時にデバッグ出力を見たい場合、
console.log ではなく、console.error を使ってください。
